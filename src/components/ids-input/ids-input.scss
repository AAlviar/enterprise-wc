@use '../../themes/mixins/ids-core-mixins' as mixins;
@import '../../themes/mixins/ids-clearable-mixin';
@import '../../themes/mixins/ids-dirty-tracker-mixin';
@import '../../themes/mixins/ids-label-state-mixin';
@import '../../themes/mixins/ids-validation-mixin';

// These input field sizes come from the design tokens and are adjusted
// here to account for 1px border size on top/bottom or left/right in some calculations.
$border-input-size-xs: calc(var(--ids-input-width-xs) - 2px);
$border-input-size-sm: calc(var(--ids-input-width-sm) - 2px);
$border-input-size-md: calc(var(--ids-input-width-md) - 2px);
$border-input-size-mm: calc(var(--ids-input-width-mm) - 2px);
$border-input-size-lg: calc(var(--ids-input-width-lg) - 2px);
$border-input-field-height-xs: calc(var(--ids-input-height-xs) - 2px);
$border-input-field-height-sm: calc(var(--ids-input-height-sm) - 2px);
$border-input-field-height-md: calc(var(--ids-input-height-md) - 2px);
$border-input-field-height-lg: calc(var(--ids-input-height-lg) - 2px);

// Mixin for message styles: [alert, error, info, success]
@mixin ids-input-message-styles {
  .alert,
  .alert:hover,
  .warning,
  .warning:hover  {
    border-color: var(--ids-input-alert-border-color);
    color: var(--ids-input-alert-text-color);

    &:focus-within,
    &.is-active {
      border-color: var(--ids-input-alert-border-color);
      box-shadow: var(--ids-input-alert-focus-box-shadow) 0 0 3px 2px;
    }

    &[disabled] {
      border-color: var(--ids-input-alert-disabled-border-color);
      color: var(--ids-input-alert-disabled-text-color);
    }
  }

  .error,
  .error:hover {
    border-color: var(--ids-input-error-border-color);
    color: var(--ids-input-error-text-color);

    &:focus-within,
    &.is-active {
      border-color: var(--ids-input-error-border-color);
      box-shadow: var(--ids-input-error-focus-box-shadow) 0 0 3px 2px;
    }

    &[disabled] {
      border-color: var(--ids-input-error-disabled-border-color);
      color: var(--ids-input-error-disabled-border-color);
    }
  }

  .info,
  .info:hover {
    border-color: var(--ids-input-info-border-color);
    color: var(--ids-input-info-text-color);

    &:focus-within,
    &.is-active {
      border-color: var(--ids-input-info-border-color);
      box-shadow: var(--ids-input-info-focus-box-shadow)  0 0 3px 2px;
    }

    &[disabled] {
      border-color: var( --ids-input-info-disabled-border-color);
      color: var(--ids-input-info-disabled-text-color);
    }
  }

  .success,
  .success:hover {
    border-color: var(--ids-input-success-border-color);
    color: var(--ids-input-success-text-color);

    &:focus-within,
    &.is-active {
      border-color: var(--ids-input-success-border-color);
      box-shadow: var(--ids-input-success-focus-box-shadow) 0 0 3px 2px;
    }

    &[disabled] {
      border-color: var(--ids-input-success-disabled-border-color);
      color: var(--ids-input-success-disabled-text-color);
    }
  }
}

/* in case of external label in compound component */
.ids-label-text {
  @include mixins.antialiased();

  font-family: var(--ids-font-family);
  color: var(--ids-input-label-text-color);
  display: flex;
  margin-block-end: var(--ids-input-margin-bottom);
  align-items: baseline;

  // Ability to center label from parent element
  justify-content: inherit;

  // Simulate standard label text size while empty with a non-breaking space
  &.empty {
    &::before {
      content: '\00a0';
    }
  }

  &.required {
    &::after {
      position: relative;
      font-family: var(--ids-font-family);
      margin-inline-start: var(--ids-spacing-sm);
      margin-inline-end: var(--ids-spacing-sm);
      font-size: var(--ids-font-size-lg);
      color: var(--ids-required-background-color);
      content: '*';
      margin-top: -10px;
      top: 1px;

      // Adding it so "*" sign doesn't change label text height
      line-height: 0;
    }

    &.no-required-indicator::after,
    &.empty::after {
      content: '';
    }
  }

  ids-text::part(text),
  .ids-text {
    display: inline;
  }
}

.disabled {
  .ids-label-text {
    color: var(--ids-text-color-disabled);

    &.required::after {
      color: var(--ids-required-disabled-background-color);
    }
  }
}

@mixin input-extra-small-height($h: $border-input-field-height-xs) {
  margin-block-end: var(--ids-font-size-xs);

  .ids-label-text {
    font-size: var(--ids-input-label-font-size);
  }

  .ids-input-field {
    padding-inline-start: var(--ids-spacing-md);
    padding-inline-end: var(--ids-spacing-md);
    padding-top: 0;
    padding-bottom: 0;
    font-size: var(--ids-input-font-size-sm);
    height: $h;
  }
}

:host {
  display: block;
  max-width: calc(var(--ids-input-width-full) - 2px);

  .ids-input {
    display: inline-block;
  }
}

:host([size='full']) {
  width: 100%;
}

.ids-input {
  position: relative;
  display: block;
  margin-block-end: var(--ids-spacing-xxl);
  max-width: var(--ids-input-width-full);

  // Applied to the wrapper element that wraps the input and other interactable elements
  .field-container {
    transition: border var(--ids-transition-length) var(--ids-transition-ease);
    margin: var(--ids-spacing-none);
    padding: var(--ids-spacing-none);
    position: relative;
    border: 1px solid;
    align-items: center;
    border-collapse: separate;
    border-radius: 2px;
    color: inherit;
    display: flex;
    resize: none;
    text-align: left;
    max-width: var(--ids-input-width-full);
  }

  &:focus-within,
  &.readonly:focus-within,
  &.is-active {
    .ids-input-field {
      outline: none;
      outline-color: transparent;
    }

    .field-container {
      border-color: var(--ids-input-focus-border-color);
      box-shadow: var(--ids-focus-box-shadow);
    }
  }

  .ids-icon.starting-icon {
    margin-inline-start: var(--ids-spacing-lg);
  }

  .ids-icon.ending-icon {
    margin-inline-end: var(--ids-spacing-lg);
  }

  // Applied to the shadow root's HTMLInputElement
  .ids-input-field {
    @include mixins.antialiased();

    box-sizing: border-box;
    background-color: transparent;
    border: none;
    font-family: var(--ids-font-family);
    padding-block-start: var(--ids-spacing-md);
    padding-block-end: var(--ids-spacing-md);
    padding-inline-start: var(--ids-spacing-lg);
    padding-inline-end: var(--ids-spacing-lg);
    font-size: var(--ids-input-font-size);
    width: 100%;

    &:focus-visible {
      outline: none;
    }

    appearance: none;
    color: currentColor;
    display: inline-block;
    height: fit-content;
    resize: none;
    text-align: left;

    &.text-ellipsis {
      text-overflow: ellipsis;
    }

    // input text-align: [start, center, end]
    &.start {
      text-align: start;
    }

    &.center {
      text-align: center;
    }

    &.end {
      text-align: end;
    }
  }

  // Validation Messages are appended beneath the `.field-container`
  .validation-message {
    margin-block-start: var(--ids-spacing-md);
    margin-bottom: 0;
  }

  // If `no-margins` is used:
  // - margins are removed from component top/bottom
  // - labels are visually hidden instead of displaying blank content for spacing
  &.no-margins,
  &.no-margins.compact {
    margin: 0;

    .field-container {
      margin-bottom: 0;
    }

    .ids-input-field {
      margin: 0;
    }

    // Reverse the margins on `ids-input[no-margins]` fields to have the bottom margin on top
    .validation-message {
      margin-bottom: 0;
      margin-block-start: var(--ids-spacing-md);
    }

    .ids-label-text {
      &.empty {
        margin: 0;
        visibility: hidden;
        height: 0;
      }
    }
  }

  // input sizes: [xs, sm, mm, md, lg, full]
  // Subtracting 2 takes into account that the width includes the `.field-container` border on both sides.
  &.xs .field-container {
    width: $border-input-size-xs;
  }

  &.sm .field-container {
    width: $border-input-size-sm;
  }

  &.mm .field-container {
    width: $border-input-size-mm;
  }

  &.md .field-container {
    width: $border-input-size-md;
  }

  &.lg .field-container {
    width: $border-input-size-lg;
  }

  &.full {
    display: block;

    .field-container {
      width: var(--ids-input-width-full);
    }
  }

  // input field-heights: [xs, sm, md, lg]
  // Subtracting 2 takes into account that the width includes the `.field-container` border on both sides.
  &.field-height-xs {
    @include input-extra-small-height();

    &.no-margin-bottom {
      margin-bottom: 0;

      .field-container,
      .ids-input-field {
        margin-bottom: 0;
      }
    }
  }

  &.field-height-sm .ids-input-field {
    height: $border-input-field-height-sm;
  }

  &.field-height-md .ids-input-field {
    height: $border-input-field-height-md;
  }

  &.field-height-lg .ids-input-field {
    height: $border-input-field-height-lg;
  }

  // input compact
  &.compact {
    @include input-extra-small-height($border-input-field-height-xs);

    &.no-margin-bottom {
      margin-bottom: 0;

      .field-container,
      .ids-input-field {
        margin-bottom: 0;
        height: $border-input-field-height-xs;
      }
    }
  }

  // Data Grid Variants

  // Flush/Invisible Variant (used in IdsDataGrid cell editing)
  &.color-variant-borderless {
    margin: 1px;
    border-radius: 0;

    input {
      font-size: var(--ids-font-size-md);
    }

    .icon-dirty {
      display: none;
    }

    .validation-message {
      display: none;
    }

    .field-container {
      background-color: transparent;
      border-color: transparent;
    }

    &:focus-within .field-container {
      box-shadow: none;
    }

    &.ids-input.field-height-lg .ids-input-field {
      padding-inline: calc(var(--ids-spacing-xxl) - 2px);
    }

    &.ids-input.field-height-md .ids-input-field {
      padding-inline: calc(var(--ids-spacing-xlg) - 2px);
    }

    &.ids-input.field-height-sm .ids-input-field {
      padding-inline: calc(var(--ids-spacing-lg) - 2px);
    }

    &.ids-input.field-height-xs .ids-input-field {
      padding-inline: var(--ids-spacing-sm);
    }
  }

  // Flush/Invisible Variant (used in IdsDataGrid cell editing)
  &.color-variant-in-cell {
    margin: 1px;

    input {
      font-size: var(--ids-font-size-md);
    }

    &.ids-input.field-height-lg .ids-input-field {
      padding-inline: 11px;
      height: 40px;
    }

    &.ids-input.full .field-container {
      margin-inline: 3px;
    }

    &.ids-input.field-height-md .ids-input-field {
      padding-inline: 6px;
      height: 30px;
    }

    &.ids-input.field-height-sm .ids-input-field {
      padding-inline: 4px;
      height: 27px;
    }

    &.ids-input.field-height-sm.full .field-container {
      margin-inline: 2px;
    }

    &.ids-input.field-height-xs .ids-input-field {
      padding-inline: 1px;
      height: 24px;
    }

    &.ids-input.field-height-xs.full .field-container {
      margin-inline: 1px;
    }
  }
}

.caps-lock-indicator {
  padding-inline-start: 8px;
  padding-inline-end: 8px;
}

// =======================================================
// Color Styles
/* stylelint-disable-next-line no-duplicate-selectors */
.ids-input {
  /* stylelint-disable-next-line no-duplicate-selectors */
  .field-container {
    background-color: var(--ids-input-background-color);
    border-color: var(--ids-input-border-color);
    color: var(--ids-input-text-color);
  }

  &.readonly {
    .field-container,
    &.hover .field-container,
    &.focus-within .field-container {
      border-color: var(--ids-input-readonly-border-color);
      color: var(--ids-input-readonly-text-color);

      &.error,
      &.error:hover {
        border-color: var(--ids-color-error);
        color: var(--ids-color-error);
      }
    }

    &:not(.readonly-background):not(.bg-transparent) {
      .field-container,
      &.hover .field-container,
      &.focus-within .field-container {
        background-color: var(--ids-input-readonly-background-color);
      }
    }
  }

  &.disabled {
    .field-container,
    &:hover .field-container,
    &:focus-within .field-container {
      border-color: var(--ids-input-disabled-border-color);
      color: var(--ids-input-disabled-text-color);

      // Safari input text color
      -webkit-text-fill-color: var(--ids-input-disabled-text-color);
    }
  }

  &.bg-transparent {
    .field-container,
    &.readonly .field-container,
    &.disabled .field-container {
      background-color: transparent;
    }

    &:focus-within {
      .field-container {
        background-color: transparent;
      }
    }
  }

  &:hover:not(.readonly):not(.disabled):not(.color-variant-borderless),
  &:hover.readonly.readonly-background {
    .field-container {
      border-color: var(--ids-input-hover-border-color);
    }

    // Include error styles
    @include ids-input-message-styles();
  }

  // Include error styles
  @include ids-input-message-styles();

  // Alternate Color Variant (used in IdsHeader - Search)
  &.color-variant-alternate {
    .field-container {
      border-color: transparent;
      color: var(--ids-input-header-text-color);
      background-color: var(--ids-input-header-background-color);
      border-bottom: 1px solid var(--ids-input-header-border-color);
      box-shadow: none;
    }

    .ids-input-field::placeholder {
      color: var(--ids-input-header-placeholder-text-color);
    }
  }

  // Alternate-formatter Color Variant (used in IdsDataGrid filter)
  &.color-variant-alternate-formatter {
    .field-container {
      background-color: var(--ids-data-grid-filter-input-background-color);
      border-color: var(--ids-data-grid-filter-input-border-color);
      color: var(--ids-data-grid-filter-input-text-color);
    }

    &:hover .field-container {
      border-color: var(--ids-data-grid-filter-input-hover-color);
    }

    &:focus-within {
      .field-container,
      &:hover .field-container {
        border-color: var(--ids-data-grid-filter-input-focus-color);
      }

      .ids-input-field {
        box-shadow: 0 0 3px 1px var(--ids-focus-box-shadow);
      }
    }

    &.disabled .field-container,
    &.disabled:hover .field-container {
      border-color: var(--ids-data-grid-filter-input-disabled-border-color);
      color: var(--ids-data-grid-filter-input-disabled-text-color);
    }

    &.readonly:not(.readonly-background):not(.bg-transparent) .field-container {
      background-color: var(--ids-data-grid-filter-input-readonly-background-color);
      border-color: var(--ids-data-grid-filter-input-readonly-border-color);
      color: var(--ids-data-grid-filter-input-readonly-text-color);
    }

    .ids-input-field::placeholder {
      color: var(--ids-data-grid-filter-input-placeholder-text-color);
    }
  }

  // App Menu
  &.color-variant-alternate,
  &.color-variant-app-menu {
    .field-container {
      color: var(--ids-input-app-menu-text-color);
    }
  }
}

.highlight {
  font-weight: var(--ids-font-weight-bold);
}

.ids-input-field[type='number']::-webkit-inner-spin-button,
.ids-input-field[type='number']::-webkit-outer-spin-button {
  appearance: none;
}

// Remove Safari caps lock icon
.ids-input-field::-webkit-caps-lock-indicator {
  visibility: hidden;
}

// Autocomplete dropdown menu sizes
:host ids-popup[type='dropdown'] {
  width: 100%;
  max-width: var(--ids-input-width-md);
}

:host([size='xs']) ids-popup[type='dropdown'] {
  max-width: var(--ids-input-width-xs);
}

:host([size='sm']) ids-popup[type='dropdown'] {
  max-width: var(--ids-input-width-sm);
}

:host([size='mm']) ids-popup[type='dropdown'] {
  max-width: var(--ids-input-width-mm);
}

:host([size='md']) ids-popup[type='dropdown'] {
  max-width: var(--ids-input-width-md);
}

:host([size='lg']) ids-popup[type='dropdown'] {
  max-width: var(--ids-input-width-lg);
}

:host([size='full']) ids-popup[type='dropdown'] {
  max-width: var(--ids-input-width-full);
}

// Loading Indicator
:host(:not([show-loading-indicator='true'])) {
  ::slotted(.slot-loading-indicator) {
    display: none;
  }
}

:host([show-loading-indicator='true']) {
  pointer-events: none;

  ::slotted(ids-loading-indicator) {
    margin-top: 3px;
    margin-bottom: 3px;
  }

  ::slotted(ids-trigger-button[slot='trigger-end']) {
    display: none;
  }

  ::slotted(.slot-loading-indicator) {
    margin-inline-end: 12px;
    margin-inline-start: 8px;
  }
}

:host([show-loading-indicator='true'][field-height='xs']) {
  ::slotted(.slot-loading-indicator) {
    margin-inline-start: 4px;
    margin-inline-end: 4px;
  }
}

:host([show-loading-indicator='true'][field-height='sm']) {
  ::slotted(.slot-loading-indicator) {
    margin-inline-end: 8px;
    margin-inline-start: 4px;
  }
}
