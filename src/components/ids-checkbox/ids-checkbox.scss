@use '../../themes/mixins/ids-checkbox-mixin' as checkbox;
@use '../../themes/mixins/ids-dirty-tracker-mixin' as dirty;
@use '../../themes/mixins/ids-validation-mixin' as valid;

:host(.justify-center) .ids-checkbox .checkmark,
:host(.justify-center) .ids-checkbox:not([color]) input[type='checkbox'] ~ .checkmark {
  top: calc(50% - 8px);
}

:host([no-margin]) .ids-checkbox {
  margin: var(--ids-spacing-none);
}

.ids-checkbox {
  margin-bottom: var(--ids-spacing-lg);

  label {
    cursor: var(--ids-cursor-pointer);
    user-select: none;
    padding-inline-start: 24px;
    position: relative;
    display: inline-block;

    &.empty::before {
      content: '\00a0';
    }

    &.required .label-checkbox::after {
      position: absolute;
      font-family: var(--ids-font-family);
      margin-inline-start: var(--ids-spacing-sm);
      margin-inline-end: var(--ids-spacing-sm);
      font-size: var(--ids-font-size-lg);
      color: var(--ids-required-background-color);
      content: '*';
      right: -13px;
      top: -2px;
    }

    &.no-required-indicator,
    &.empty {
      .label-checkbox::after {
        content: '';
      }
    }
  }

  &.disabled label {
    cursor: var(--ids-cursor-default);

    &.required .label-checkbox::after {
     color: var(--ids-required-disabled-background-color);
    }
  }

  &.hitbox {
    padding-top: var(--ids-spacing-xlg);
    padding-bottom: var(--ids-spacing-xlg);

    label {
      padding-inline-start: 42px;

      span.checkmark {
        margin-inline-start: 14px;
      }
    }

    .validation-message {
      margin-inline-start: 14px;
    }
  }

  &.horizontal {
    margin-inline-end: var(--ids-spacing-xlg);
    display: inline-block;
  }

  input[type='checkbox'] {
    position: absolute;
    cursor: var(--ids-cursor-pointer);
    opacity: 0;
    height: 0;
    width: 0;

    ~ .checkmark {
      @include checkbox.checkbox-unchecked();
    }

    &.error ~ .checkmark {
      @include checkbox.checkbox-unchecked-error();
    }

    &:checked ~ .checkmark {
      @include checkbox.checkbox-checked();

      &::after {
        @include checkbox.checkbox-checked-after();
      }
    }

    &.indeterminate ~ .checkmark {
      @include checkbox.checkbox-indeterminate();

      &::after {
        @include checkbox.checkbox-indeterminate-after();
      }
    }

    &:focus ~ .checkmark {
      @include checkbox.checkbox-focus();
    }

    &:disabled {
      ~ .checkmark {
        @include checkbox.checkbox-disabled-unchecked();
      }

      ~ .label-checkbox {
        @include checkbox.checkbox-disabled-text();
      }

      &.error ~ .checkmark {
        @include checkbox.checkbox-disabled-unchecked-error();
      }

      &:checked ~ .checkmark {
        @include checkbox.checkbox-disabled-checked(light);
      }
    }
  }

  &.no-animation {
    input[type='checkbox']:checked ~ .checkmark::after {
      animation: none;
    }
  }

  // Colored Checkboxes
  @include checkbox.checkbox-colored();

  .validation-message {
    margin-top: var(--ids-spacing-md);
    margin-inline-start: -1px;
  }

  &.has-focus {
    input[type='checkbox'] ~ .checkmark {
      border-color: var(--ids-focus-ring-border-color);
      box-shadow: var(--ids-shadow-lg);
    }
  }
}

:host-context(form) {
  margin-top: var(--ids-spacing-lg);
  display: flex;
}

// Negate some rules for RTL
:host([dir='rtl']) {
  input[type='checkbox'] ~ .checkmark {
    left: initial;
    right: 0;
  }

  label.required .label-checkbox::after {
    right: initial;
    left: -13px;
  }
}

// Multiselect checkbox
:host(.multiselect-checkbox) {
  input[type='checkbox']:not(:checked):not(:disabled) ~ .checkmark {
    background-color: var(--ids-body-background-color);
  }

  .ids-checkbox label {
    padding-inline-start: var(--ids-spacing-xxl);
  }
}
