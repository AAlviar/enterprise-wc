/*
  Grid Settings
*/
:host {
  --min-col-width: 0; // Do we need thresholds for min/max col widths.. sm (50px) | md (176px) | lg (360px) etc.
  --max-col-width: 1fr;
  --min-row-height: 0;
  --min-row-width: 1fr;
  --grid-auto-row-height: 0;
  --sticky-position: 0;
}

$spacing-unit: 8px;
$grid-cols: 24;
$grid-rows: 50;
$grid-gap-sm: $spacing-unit;
$grid-gap: $spacing-unit * 2;
$grid-gap-md: $spacing-unit * 3;
$grid-gap-lg: $spacing-unit * 4;
$grid-gap-xl: $spacing-unit * 5;
$min-col-width: var(--min-col-width);
$max-col-width: var(--max-col-width);
$min-row-height: var(--min-row-height);
$max-row-height: var(--max-row-height);
$breakpoint-xs: 360px;
$breakpoint-sm: 600px;
$breakpoint-md: 840px;
$breakpoint-lg: 1024px;
$breakpoint-xl: 1280px;
$breakpoint-xxl: 1488px; // xxl is '1440px' in tokens?

:host(.grid) {
  display: grid;
  grid-gap: $grid-gap;
  justify-content: center;
}

:host(.grid.grid-gap-sm) {
  grid-gap: $grid-gap-sm;
}

:host(.grid.grid-gap-md) {
  grid-gap: $grid-gap-md;
}

:host(.grid.grid-gap-lg) {
  grid-gap: $grid-gap-lg;
}

:host(.grid.grid-gap-xl) {
  grid-gap: $grid-gap-xl;
}

/**
  Grid - Auto Fit/Fill
*/
:host(.grid-auto-fit) {
  width: 100%;
  grid-template-columns: repeat(auto-fit, minmax($min-col-width, $max-col-width));
}

:host(.grid-auto-fill) {
  width: 100%;
  grid-template-columns: repeat(auto-fill, minmax($min-col-width, $max-col-width));
}

:host(.grid-cols-auto)	{
  grid-auto-columns: auto;
}

:host(.grid-cols-min)	{
  grid-auto-columns: min-content;
}

:host(.grid-cols-max)	{
  grid-auto-columns: max-content;
}

:host(.grid-cols-fr)	{
  grid-auto-columns: minmax(0, 1fr);
}

:host(.grid-flow-row) {
  grid-auto-flow: row;
}

:host(.grid-flow-col) {
  grid-auto-flow: column;
}

:host(.grid-flow-dense) {
  grid-auto-flow: dense;
}

:host(.grid-flow-row-dense) {
  grid-auto-flow: row dense;
}

:host(.grid-flow-col-dense) {
  grid-auto-flow: column dense;
}

:host(.auto-rows-auto) {
  grid-auto-rows: auto;
}

:host(.auto-rows-min) {
  grid-auto-rows: min-content;
}

:host(.auto-rows-max) {
  grid-auto-rows: max-content;
}

:host(.auto-rows-fr) {
  grid-auto-rows: minmax(0, 1fr);
}

:host(.grid-auto-row-height) {
  grid-auto-rows: var(--grid-auto-row-height);
}

:host(.justify-content-start) {
  justify-content: start;
}

:host(.justify-content-center) {
  justify-content: center;
}

:host(.justify-content-between) {
  justify-content: space-between;
}

:host(.justify-content-around) {
  justify-content: space-around;
}

:host(.justify-content-evenly) {
  justify-content: space-evenly;
}

:host(.justify-content-end) {
  justify-content: end;
}

::slotted(.span-all) {
  grid-column: 1 / -1;
}

::slotted(.row-span-all) {
  grid-row: 1 / -1;
}

::slotted(.sticky) {
  position: sticky;
  top: var(--sticky-position);
}

/**
  Grid Columms - Base
*/
@for $i from 1 through $grid-cols {
  :host(.grid-cols-#{$i}) {
    width: 100%;
    grid-template-columns: repeat($i, minmax($min-col-width, $max-col-width));
  }

  :host(.grid) > ::slotted(.span-#{$i}) {
    grid-column: span $i / span $i;
  }

  :host(.grid) > ::slotted(.col-start-#{$i}) {
    grid-column-start: $i;
  }

  :host(.grid) > ::slotted(.col-end-#{$i}) {
    grid-column-end: $i;
  }

  :host(.grid) > ::slotted(.order-#{$i}) {
    order: $i;
  }
}

/**
  Grid Rows - Base
*/
@for $i from 1 through $grid-rows {
  :host(.grid-rows-#{$i}) {
    grid-template-rows: repeat($i, minmax(0, 1fr));
  }

  :host(.grid) > ::slotted(.row-span-#{$i}) {
    grid-row: span $i / span $i;
  }
}

/**
  Grid Columms and Rows - XSmall and up
*/
@media (min-width: $breakpoint-xs) {
  @for $i from 1 through $grid-cols {
    :host(.grid-cols-xs-#{$i}) {
      width: 100%;
      grid-template-columns: repeat($i, minmax($min-col-width, $max-col-width));
    }

    :host(.grid) > ::slotted(.span-xs-#{$i}) {
      grid-column: span $i / span $i;
    }

    :host(.grid) > ::slotted(.col-start-xs-#{$i}) {
      grid-column-start: $i;
    }

    :host(.grid) > ::slotted(.col-end-xs-#{$i}) {
      grid-column-end: $i;
    }

    :host(.grid) > ::slotted(.order-xs-#{$i}) {
      order: $i;
    }
  }

  @for $i from 1 through $grid-rows {
    :host(.grid-rows-xs-#{$i}) {
      grid-template-rows: repeat($i, minmax(0, 1fr));
    }

    :host(.grid) > ::slotted(.row-span-xs-#{$i}) {
      grid-row: span $i / span $i;
    }
  }
}

/**
  Grid Columms and Rows - Small and up
*/
@media (min-width: $breakpoint-sm) {
  @for $i from 1 through $grid-cols {
    :host(.grid-cols-sm-#{$i}) {
      width: 100%;
      grid-template-columns: repeat($i, minmax($min-col-width, $max-col-width));
    }

    :host(.grid) > ::slotted(.span-sm-#{$i}) {
      grid-column: span $i / span $i;
    }

    :host(.grid) > ::slotted(.col-start-sm-#{$i}) {
      grid-column-start: $i;
    }

    :host(.grid) > ::slotted(.col-end-sm-#{$i}) {
      grid-column-end: $i;
    }

    :host(.grid) > ::slotted(.order-sm-#{$i}) {
      order: $i;
    }
  }

  @for $i from 1 through $grid-rows {
    :host(.grid-rows-sm-#{$i}) {
      grid-template-rows: repeat($i, minmax(0, 1fr));
    }

    :host(.grid) > ::slotted(.row-span-sm-#{$i}) {
      grid-row: span $i / span $i;
    }
  }
}

/**
  Grid Columms and Rows - Medium and up
*/
@media (min-width: $breakpoint-md) {
  @for $i from 1 through $grid-cols {
    :host(.grid-cols-md-#{$i}) {
      width: 100%;
      grid-template-columns: repeat($i, minmax($min-col-width, $max-col-width));
    }

    :host(.grid) > ::slotted(.span-md-#{$i}) {
      grid-column: span $i / span $i;
    }

    :host(.grid) > ::slotted(.col-start-md-#{$i}) {
      grid-column-start: $i;
    }

    :host(.grid) > ::slotted(.col-end-md-#{$i}) {
      grid-column-end: $i;
    }

    :host(.grid) > ::slotted(.order-md-#{$i}) {
      order: $i;
    }
  }

  @for $i from 1 through $grid-rows {
    :host(.grid-rows-md-#{$i}) {
      grid-template-rows: repeat($i, minmax(0, 1fr));
    }

    :host(.grid) > ::slotted(.row-span-md-#{$i}) {
      grid-row: span $i / span $i;
    }
  }
}

/**
  Grid Columms and Rows - Large and up
*/
@media (min-width: $breakpoint-lg) {
  @for $i from 1 through $grid-cols {
    :host(.grid-cols-lg-#{$i}) {
      width: 100%;
      grid-template-columns: repeat($i, minmax($min-col-width, $max-col-width));
    }

    :host(.grid) > ::slotted(.span-lg-#{$i}) {
      grid-column: span $i / span $i;
    }

    :host(.grid) > ::slotted(.col-start-lg-#{$i}) {
      grid-column-start: $i;
    }

    :host(.grid) > ::slotted(.col-end-lg-#{$i}) {
      grid-column-end: $i;
    }

    :host(.grid) > ::slotted(.order-lg-#{$i}) {
      order: $i;
    }
  }

  @for $i from 1 through $grid-rows {
    :host(.grid-rows-lg-#{$i}) {
      grid-template-rows: repeat($i, minmax(0, 1fr));
    }

    :host(.grid) > ::slotted(.row-span-lg-#{$i}) {
      grid-row: span $i / span $i;
    }
  }
}

/**
  Grid Columms and Rows - XLarge and up
*/
@media (min-width: $breakpoint-xl) {
  @for $i from 1 through $grid-cols {
    :host(.grid-cols-xl-#{$i}) {
      width: 100%;
      grid-template-columns: repeat($i, minmax($min-col-width, $max-col-width));
    }

    :host(.grid) > ::slotted(.span-xl-#{$i}) {
      grid-column: span $i / span $i;
    }

    :host(.grid) > ::slotted(.col-start-xl-#{$i}) {
      grid-column-start: $i;
    }

    :host(.grid) > ::slotted(.col-end-xl-#{$i}) {
      grid-column-end: $i;
    }

    :host(.grid) > ::slotted(.order-xl-#{$i}) {
      order: $i;
    }
  }

  @for $i from 1 through $grid-rows {
    :host(.grid-rows-xl-#{$i}) {
      grid-template-rows: repeat($i, minmax(0, 1fr));
    }

    :host(.grid) > ::slotted(.row-span-xl-#{$i}) {
      grid-row: span $i / span $i;
    }
  }
}

/**
  Grid Columms and Rows - XxLarge and up
*/
@media (min-width: $breakpoint-xxl) {
  @for $i from 1 through $grid-cols {
    :host(.grid-cols-xxl-#{$i}) {
      width: 100%;
      grid-template-columns: repeat($i, minmax($min-col-width, $max-col-width));
    }

    :host(.grid) > ::slotted(.span-xxl-#{$i}) {
      grid-column: span $i / span $i;
    }

    :host(.grid) > ::slotted(.col-start-xxl-#{$i}) {
      grid-column-start: $i;
    }

    :host(.grid) > ::slotted(.col-end-xxl-#{$i}) {
      grid-column-end: $i;
    }

    :host(.grid) > ::slotted(.order-xxl-#{$i}) {
      order: $i;
    }
  }

  @for $i from 1 through $grid-rows {
    :host(.grid-rows-xxl-#{$i}) {
      grid-template-rows: repeat($i, minmax(0, 1fr));
    }

    :host(.grid) > ::slotted(.row-span-xxl-#{$i}) {
      grid-row: span $i / span $i;
    }
  }
}

// Utils for testing
$fillColor: #FFE9E9;
$textColor: #FF391E;

::slotted(.grid-cell) {
  // color: $textColor;
  font-size: 38px;
  font-family: sans-serif;
  // display: flex;
  // align-items: center;
  // justify-content: center;
}

::slotted(.grid-cell.fill) {
  background-color: $fillColor;
}

::slotted(.height-auto) {
  height: auto;
}
